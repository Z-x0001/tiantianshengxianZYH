<?xml version="1.0" encoding="UTF-8"?>

<!--
    dtd : document type definition    xxx.dtd  xxx2.dtd
    xsd : xml schema definition       xxx.xsd  xxx2.xsd
    文档约束：标签，顺序，层级，属性
-->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/aop
                           http://www.springframework.org/schema/aop/spring-aop.xsd
                           http://www.springframework.org/schema/tx
                           http://www.springframework.org/schema/tx/spring-tx.xsd
                           http://www.springframework.org/schema/context
                           http://www.springframework.org/schema/context/spring-context.xsd">

    <!--  Shiro配置文件：（也是属于Spring配置文件的一种）  -->

    <!-- ==============  第一步： 自定义的Realm：=================================================================  -->
    <bean id="myRealm" class="per.zyh.realm.MyRealm">
        <!--  自定义的Realm的几个属性： -->
        <property name="userService" ref="userServiceImpl"/>
        <property name="roleService" ref="roleServiceImpl"/>
        <property name="permissionService" ref="permissionServiceImpl"/>

        <!-- 密码比对器 -->
        <property name="credentialsMatcher">
            <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
                <property name="hashAlgorithmName" value="SHA-256"/>
                <!-- true means hex encoded, false means base64 encoded -->
                <property name="storedCredentialsHexEncoded" value="false"/>
                <property name="hashIterations" value="10000"/>
            </bean>
        </property>
    </bean>


    <!-- ==============  第二步："老大"，SecurityManager组件；=================================================================  -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <!--  “老大”的属性1 ：Realm（自定义）  -->
        <property name="realm" ref="myRealm"/>
        <!-- "老大"的属性2：记住我管理器： -->
        <property name="rememberMeManager" ref="rememberMeManager"/>
<!--
        &lt;!&ndash; "老大"的属性3：Session管理器： &ndash;&gt;
        <property name="sessionManager" ref="sessionManager"/>
        &lt;!&ndash; "老大"的属性4：缓存Cache管理器： &ndash;&gt;
        <property name="cacheManager" ref="cacheManager"/>
-->

    </bean>


    <!-- ==============  第三步：ShiroFilter 过滤器：=================================================================  -->
    <!-- 该工厂Bean，负责生产SpringShiroFilter
     （ 持有shiro的过滤相关规则，可进行请求的过滤校验，校验请求是否合法 ）
-->
    <bean id="shiroFilter04" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <!-- 注入核心对象 -->
        <property name="securityManager" ref="securityManager"/>
    </bean>


    <!-- ==============  第四步：记住我系列组件：=================================================================  -->
    <!--    记住我的Cookie组件：  -->
    <bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <!-- rememberMe是cookie值中的key，value时用户名的密文
             cookie["rememberMe":"deleteMe"] 此cookie每次登陆后都会写出，用于清除之前的cookie
             cookie["rememberMe":username的密文] 此cookie也会在登录后写出，用于记录最新的username
            （ops: 如上设计，既能保证每次登陆后重新记录cookie，也能保证切换账号时，记录最新账号）
        -->
        <property name="name" value="rememberMe04"/>
        <!-- cookie只在http请求中可用，那么通过js脚本将无法读取到cookie信息，有效防止cookie被窃取 -->
        <property name="httpOnly" value="true"/>
        <!-- cookie的生命周期，单位：秒 -->
        <property name="maxAge" value="604800"/><!-- 7天 -->
    </bean>

    <!--  记住我管理器： -->
    <bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
        <property name="cookie" ref="rememberMeCookie"/>
    </bean>

    <!-- 会话Cookie模板 默认可省-->
    <bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <!-- cookie的 key="sid" -->
        <property name="name" value="JSESSIONID04"/>
        <!-- 只允许http请求访问cookie -->
        <property name="httpOnly" value="true"/>
        <!-- cookie过期时间，-1:存活一个会话 ,单位:秒 ，默认为-1-->
        <property name="maxAge" value="-1"/>
    </bean>

<!--

        &lt;!&ndash; ============== 第五步： Session系列组件：=================================================================  &ndash;&gt;
    &lt;!&ndash;  Session管理器：&ndash;&gt;
    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        &lt;!&ndash; 默认值和配置中给出的一致，所以该属性:sessionIdCookie 可以省略 &ndash;&gt;
        <property name="sessionIdCookie" ref="sessionIdCookie"/>
        &lt;!&ndash; session全局超时时间, 单位:毫秒 ，30分钟 默认值为1800000&ndash;&gt;
        <property name="globalSessionTimeout" value="1800000"/>
        &lt;!&ndash;
        &lt;!&ndash; 注册session监听器 &ndash;&gt;
        <property name="sessionListeners">
            <list>
                <bean class="per.zyh.session.MySessionListener"></bean>
            </list>
        </property>
&ndash;&gt;

        &lt;!&ndash; 注册SessionDAO,负责将Session对象存入redis &ndash;&gt;
        <property name="sessionDAO">
            <bean class="per.zyh.session.MySessionDAO">
                <property name="template" ref="redisTemplate2"/>
            </bean>
        </property>

        &lt;!&ndash; session检测的时间间隔 &ndash;&gt;
        <property name="sessionValidationInterval" value="15000"></property>
    </bean>

-->

    <!--

    &lt;!&ndash; ============== 第六步： 声明CacheManager组件：=================================================================  &ndash;&gt;
    &lt;!&ndash; 注意：（自定义Cache即MyShiroCache不用声明，因为该CacheManager组件会生产自定义Cache对象） &ndash;&gt;
    <bean id="cacheManager" class="per.zyh.cache.MyShiroCacheManager">
        &lt;!&ndash; 这里报红没关系，因为在父工厂Spring工厂里边声明了该RedisTemplate组件 &ndash;&gt;
        <property name="template" ref="redisTemplate"/>
    </bean>
-->

</beans>